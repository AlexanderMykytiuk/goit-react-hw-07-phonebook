{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/ListItem/ListItem.module.css","Components/Filter/Filter.module.css","Components/Container/Container.module.css","Components/ContactList/ContactList.module.css","Components/Button/Button.module.css","Components/Spinner/Spinner.module.css","Components/Container/Container.jsx","redux/Contacts/contacts-actions.js","redux/Contacts/contacts-operation.js","Components/Button/Button.jsx","Components/ListItem/ListItem.jsx","Components/ContactList/ContactList.jsx","redux/Contacts/contacts-selectors.js","Components/ContactList/ContactList.container.js","Components/ContactForm/ContactForm.jsx","Components/ContactForm/ContactForm.container.js","Components/Filter/Filter.jsx","Components/Filter/Filter.container.js","Components/Spinner/Spinner.jsx","App.js","redux/Contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","styles","container","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","actions","axios","defaults","baseURL","name","number","dispatch","a","contact","post","response","data","contactID","type","delete","get","Button","onClick","text","button","defaultProps","ListItem","contacts","onDeleteContact","map","id","listItem","ContactList","list","getContacts","state","items","getFilter","filter","getVisibleContacts","createSelector","normalizedContact","toLowerCase","includes","connect","contactsOperation","ContactForm","handleInputChange","event","valueInput","currentTarget","setState","value","trimLeft","handleSubmit","preventDefault","props","addContact","test","toast","find","findContact","reset","this","onSubmit","form","label","input","onChange","React","Component","Filter","onHandleInputSearch","findContactLabel","findContactInput","e","contactsActions","Spinner","spinner","color","height","width","timeout","App","fetchContacts","isLoading","loading","createReducer","payload","_","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e10ec508.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2JTtQ\",\"input\":\"ContactForm_input__30bgY\",\"label\":\"ContactForm_label__VM8pw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ListItem_listItem__3i84E\",\"name\":\"ListItem_name__3-rgW\",\"number\":\"ListItem_number__1cOjV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findContact\":\"Filter_findContact__HhLP_\",\"findContactLabel\":\"Filter_findContactLabel__3gzrC\",\"findContactInput\":\"Filter_findContactInput__wbO6U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3mi6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3mPst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2WIiX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__1zNLw\"};","import React from 'react';\nimport styles from './Container.module.css';\nimport PropTypes from 'prop-types';\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nconst fetchContactError = createAction('contacts/fetchContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nconst filterContact = createAction('contacts/Filter');\n\nexport default {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContact,\n};","import axios from 'axios';\nimport actions from './contacts-actions';\nconst {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} = actions;\naxios.defaults.baseURL = 'http://localhost:8888';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactRequest());\n  try {\n    const response = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchContactError(error));\n  }\n};\nconst addContact = (name, number) => async dispatch => {\n  const contact = { name, number };\n  dispatch(addContactRequest());\n  try {\n    const response = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(response.data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = contactID => async dispatch => {\n  dispatch({\n    type: deleteContactRequest(),\n  });\n  try {\n    await axios.delete(`./contacts/${contactID}`);\n    dispatch(deleteContactSuccess(contactID));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n\nexport default { addContact, deleteContact, fetchContacts };\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Button.module.css';\n\nconst Button = ({ onClick, text, type = 'button' }) => (\n  <button type={type} className={styles.button} onClick={onClick}>\n    {text}\n  </button>\n);\n\nButton.defaultProps = {\n  onClick: () => null,\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ListItem.module.css';\nimport Button from '../Button';\n\nconst ListItem = ({ contacts, onDeleteContact }) => {\n  return contacts.map(({ id, name, number }) => (\n    <li className={styles.listItem} key={id}>\n      <p className={styles.name}>{name} </p>\n      <p className={styles.number}>{number} </p>\n      <Button text=\"Delete\" onClick={() => onDeleteContact(id)} />\n    </li>\n  ));\n};\nListItem.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\nexport default ListItem;\n","import React from 'react';\nimport styles from './ContactList.module.css';\nimport ListItem from '../ListItem';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={styles.list}>\n      <ListItem contacts={contacts} onDeleteContact={onDeleteContact} />\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { createSelector } from '@reduxjs/toolkit';\nexport const getIsLoading = state => state.contacts.loading;\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedContact = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedContact),\n    );\n  },\n);\n","import { connect } from 'react-redux';\nimport { contactsOperation } from '../../redux/Contacts';\nimport ContactList from './ContactList';\nimport { getVisibleContacts } from '../../redux/Contacts/contacts-selectors';\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getVisibleContacts(state),\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperation.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\n\nimport styles from './ContactForm.module.css';\nimport Button from '../Button';\nimport { toast } from 'react-toastify';\n\nclass ContactForm extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  handleInputChange = event => {\n    const valueInput = event.currentTarget.name;\n    this.setState({ [valueInput]: event.currentTarget.value.trimLeft() });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { contacts, addContact } = this.props;\n    const { name, number } = this.state;\n    let expression = /^\\d+/;\n    if (!name || !number || expression.test(number) === false) {\n      return toast('Please fill all fields in the correct format');\n    }\n\n    const findName = contacts.find(findContact => {\n      return findContact.name === name;\n    });\n\n    if (findName) {\n      toast(`${name} is already in the contacts`);\n      this.reset();\n    } else {\n      addContact(name, number);\n      this.reset();\n    }\n  };\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <form onSubmit={this.handleSubmit} className={styles.form}>\n          <label className={styles.label}>\n            Name\n            <input\n              className={styles.input}\n              name=\"name\"\n              type=\"text\"\n              value={name}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label className={styles.label}>\n            Number\n            <input\n              className={styles.input}\n              name=\"number\"\n              type=\"tel\"\n              value={number}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <Button text=\"Add contact\" type=\"submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\nimport { contactsOperation } from '../../redux/Contacts';\nimport ContactForm from './ContactForm';\nimport { getContacts } from '../../redux/Contacts/contacts-selectors';\n\nconst mapStateToProps = state => ({\n  contacts: getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: (name, number) =>\n    dispatch(contactsOperation.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ filter, onHandleInputSearch }) => {\n  return (\n    <div className={styles.findContact}>\n      <h2>Contacts</h2>\n      <label className={styles.findContactLabel}>\n        Find contacts by name\n        <input\n          className={styles.findContactInput}\n          name=\"filter\"\n          type=\"text\"\n          value={filter}\n          onChange={onHandleInputSearch}\n        />\n      </label>\n    </div>\n  );\n};\nFilter.propTypes = {\n  onHandleInputSearch: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default Filter;","import { connect } from 'react-redux';\nimport { contactsActions } from '../../redux/Contacts';\nimport Filter from './Filter';\nimport { getFilter } from '../../redux/Contacts/contacts-selectors';\n\nconst mapStateToProps = state => ({\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onHandleInputSearch: e =>\n    dispatch(contactsActions.filterContact(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\nimport styles from './Spinner.module.css';\n\nconst Spinner = () => {\n  return (\n    <div className={styles.spinner}>\n      <Loader type=\"BallTriangle\" color=\"rgb(5, 54, 39)\" height={80} width={80} timeout={2000}/>\n    </div>\n  );\n};\nexport default Spinner;\n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Container from './Components/Container';\nimport ContactList from './Components/ContactList';\nimport ContactForm from './Components/ContactForm';\nimport Filter from './Components/Filter';\nimport { connect } from 'react-redux';\nimport contactsOperation from './redux/Contacts/contacts-operation';\nimport Spinner from './Components/Spinner';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <Container>\n        <ContactForm />\n        <Filter />\n        {this.props.isLoading && <Spinner />}\n        <ContactList />\n        <ToastContainer />\n      </Container>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  isLoading: state.contacts.loading,\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperation.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\nconst {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContact,\n} = actions;\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(contact => payload !== contact.id),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [filterContact]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, loading });","import contactsReducer from './Contacts/contacts-reducer';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  \n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}